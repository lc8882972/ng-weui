    @function px2em($px, $base-font-size: 16px) {
        @if (unitless($px)) {
            @return px2em($px + 0px); // That may fail.
        }
        @else if (unit($px)==em) {
            @return $px;
        }
        @return ($px / $base-font-size) * 1em;
    }
    
    @function px2rem($px, $base-font-size: 75px) {
        @if (unitless($px)) {
            @return px2rem($px + 0px); // That may fail.
        }
        @else if (unit($px)==rem) {
            @return $px;
        }
        @return ($px / $base-font-size) * 1rem;
    }
    
    @mixin font-dpr($font-size) {
        font-size: $font-size;
        [data-dpr="2"] & {
            font-size: $font-size * 2;
        }
        [data-dpr="3"] & {
            font-size: $font-size * 3;
        }
    }
    
    @mixin px2rem2($property, $px-values, $baseline-px:16px, $support-for-ie:false) {
        //Conver the baseline into rems
        $baseline-rem: $baseline-px / 1rem * 1;
        //Print the first line in pixel values
        @if $support-for-ie {
            #{$property}: $px-values;
        }
        //if there is only one (numeric) value, return the property/value line for it.
        @if type-of($px-values)=="number" {
            #{$property}: $px-values / $baseline-rem;
        }
        @else {
            //Create an empty list that we can dump values into
            $rem-values: ();
            @each $value in $px-values {
                // If the value is zero or not a number, return it
                @if $value==0 or type-of($value) !="number" {
                    $rem-values: append($rem-values, $value / $baseline-rem);
                }
            }
            // Return the property and its list of converted values
            #{$property}: $rem-values;
        }
    }
    
    .tab-item {
        font-size: $px2rem2(24px, 75px);
    }